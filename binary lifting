void binary_lifting(ll src, ll par, vector<pair<ll, ll> >  adj[], vector<vector<pair<ll, ll> > >  &up, vll &dep, unordered_map<ll, unordered_map<ll, ll> > &mp)
{
    if(par != -1)   dep[src] = 1 + dep[par];
    up[src][0].first = par;
    for(int i = 1; i < 20; i++)
    {
        if(up[src][i - 1].first != -1)
        {
            up[src][i].first = up[up[src][i - 1].first][i - 1].first;
            up[src][i].second = min(mp[src][par],up[up[src][i - 1].first][i - 1].second)) ;
        }
        else
        {
            up[src][i].first = -1;
            up[src][i].second = -1;
        }
    }

    for(int child : adj[src])
    {
        if(child != par)
        {
            binary_lifting(child, src, adj, up, dep);
        }
    }
}
ll lca(ll u, ll v, vll &lvl, vector<vector<pair<ll, ll> > > &up)
{
    if(lvl[u] < lvl[v])
    {
        swap(u, v);
    }
    ll diff = lvl[u] - lvl[v];
    for(ll i = 0; i < 20; ++i) \
    {
        if(( 1 << i) & diff)
            u = up[u][i].first;
    }
    if(u == v)
        return u;
    for(ll i = 19; i >= 0; --i)
    {
        if(up[u][i].first != up[v][i].first)
        {
            u = up[u][i].first;
            v = up[v][i].first;
        }
    }
    return up[u][0].first;
}
ll ans_query(ll node, ll jump_required, vector<vector<ll> > &up)
{
    if(node == -1 || jump_required == 0)
        return node;

    for(ll i = 19; i >= 0; i--){
        if(jump_required >= (1 << i)){
            return ans_query(up[node][i], jump_required - (1 << i), up);
        }
    }
    return node;
}
